name: CI Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Job 1: Linting y formateo
  lint:
    name: Lint & Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort pylint bandit safety

      - name: Run Black (formatting check)
        run: black --check --diff .

      - name: Run isort (import sorting check)
        run: isort --check-only --diff .

      - name: Run Flake8 (linting)
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run Pylint
        continue-on-error: true
        run: |
          find . -type f -name "*.py" ! -path "*/venv/*" ! -path "*/__pycache__/*" ! -name "*_pb2*.py" | xargs pylint --exit-zero

      - name: Run Bandit (security)
        run: bandit -r . -f json -o bandit-report.json || true

      - name: Upload Bandit Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: bandit-report
          path: bandit-report.json

  # Job 2: Tests unitarios
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        service: 
          - auth-service
          - vehicle-service
          - route-service
          - fuel-consumption-service
          - driver-service
          - api-gateway
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies for ${{ matrix.service }}
        run: |
          if [ -f ${{ matrix.service }}/requirements.txt ]; then
            pip install -r ${{ matrix.service }}/requirements.txt
            pip install pytest pytest-cov pytest-asyncio pytest-mock
          fi

      - name: Run tests for ${{ matrix.service }}
        run: |
          if [ -d ${{ matrix.service }}/tests ]; then
            cd ${{ matrix.service }}
            pytest tests/ --cov=. --cov-report=xml --cov-report=html --cov-report=term
          else
            echo "No tests directory found for ${{ matrix.service }}"
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./${{ matrix.service }}/coverage.xml
          flags: ${{ matrix.service }}
          name: codecov-${{ matrix.service }}

  # Job 3: SonarQube Analysis
  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: SonarQube Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Job 4: Build Docker images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint, test]
    strategy:
      matrix:
        service:
          - auth-service
          - vehicle-service
          - route-service
          - fuel-consumption-service
          - driver-service
          - api-gateway
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/xyz-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 5: Security Scan
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        service:
          - auth-service
          - vehicle-service
          - route-service
          - fuel-consumption-service
          - driver-service
          - api-gateway
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './${{ matrix.service }}'
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'
          category: trivy-${{ matrix.service }}

  # Job 6: Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: example
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Run integration tests
        run: |
          if [ -d tests/integration ]; then
            pip install pytest pytest-asyncio
            pytest tests/integration/ -v
          else
            echo "No integration tests found"
          fi
        env:
          MONGO_ROOT_USERNAME: root
          MONGO_ROOT_PASSWORD: example
          DB_HOST: localhost

  # Job 7: Notify
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint, test, sonarqube, build, security, integration-test]
    if: always()
    steps:
      - name: Check build status
        run: |
          if [ "${{ needs.build.result }}" == "success" ]; then
            echo "Build succeeded"
          else
            echo "Build failed"
            exit 1
          fi
