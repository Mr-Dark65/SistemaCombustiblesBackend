# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import vehicles_pb2 as vehicles__pb2


class VehiclesServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateVehicle = channel.unary_unary(
                '/vehicles.VehiclesService/CreateVehicle',
                request_serializer=vehicles__pb2.CreateVehicleRequest.SerializeToString,
                response_deserializer=vehicles__pb2.VehicleResponse.FromString,
                )
        self.GetVehicle = channel.unary_unary(
                '/vehicles.VehiclesService/GetVehicle',
                request_serializer=vehicles__pb2.GetVehicleRequest.SerializeToString,
                response_deserializer=vehicles__pb2.VehicleResponse.FromString,
                )
        self.ListVehicles = channel.unary_unary(
                '/vehicles.VehiclesService/ListVehicles',
                request_serializer=vehicles__pb2.ListVehiclesRequest.SerializeToString,
                response_deserializer=vehicles__pb2.ListVehiclesResponse.FromString,
                )
        self.UpdateVehicleStatus = channel.unary_unary(
                '/vehicles.VehiclesService/UpdateVehicleStatus',
                request_serializer=vehicles__pb2.UpdateStatusRequest.SerializeToString,
                response_deserializer=vehicles__pb2.VehicleResponse.FromString,
                )
        self.AssignDriver = channel.unary_unary(
                '/vehicles.VehiclesService/AssignDriver',
                request_serializer=vehicles__pb2.AssignDriverRequest.SerializeToString,
                response_deserializer=vehicles__pb2.VehicleResponse.FromString,
                )
        self.RemoveDriver = channel.unary_unary(
                '/vehicles.VehiclesService/RemoveDriver',
                request_serializer=vehicles__pb2.RemoveDriverRequest.SerializeToString,
                response_deserializer=vehicles__pb2.VehicleResponse.FromString,
                )


class VehiclesServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateVehicle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVehicle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListVehicles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateVehicleStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AssignDriver(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveDriver(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VehiclesServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateVehicle': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateVehicle,
                    request_deserializer=vehicles__pb2.CreateVehicleRequest.FromString,
                    response_serializer=vehicles__pb2.VehicleResponse.SerializeToString,
            ),
            'GetVehicle': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVehicle,
                    request_deserializer=vehicles__pb2.GetVehicleRequest.FromString,
                    response_serializer=vehicles__pb2.VehicleResponse.SerializeToString,
            ),
            'ListVehicles': grpc.unary_unary_rpc_method_handler(
                    servicer.ListVehicles,
                    request_deserializer=vehicles__pb2.ListVehiclesRequest.FromString,
                    response_serializer=vehicles__pb2.ListVehiclesResponse.SerializeToString,
            ),
            'UpdateVehicleStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateVehicleStatus,
                    request_deserializer=vehicles__pb2.UpdateStatusRequest.FromString,
                    response_serializer=vehicles__pb2.VehicleResponse.SerializeToString,
            ),
            'AssignDriver': grpc.unary_unary_rpc_method_handler(
                    servicer.AssignDriver,
                    request_deserializer=vehicles__pb2.AssignDriverRequest.FromString,
                    response_serializer=vehicles__pb2.VehicleResponse.SerializeToString,
            ),
            'RemoveDriver': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveDriver,
                    request_deserializer=vehicles__pb2.RemoveDriverRequest.FromString,
                    response_serializer=vehicles__pb2.VehicleResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vehicles.VehiclesService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VehiclesService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateVehicle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vehicles.VehiclesService/CreateVehicle',
            vehicles__pb2.CreateVehicleRequest.SerializeToString,
            vehicles__pb2.VehicleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetVehicle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vehicles.VehiclesService/GetVehicle',
            vehicles__pb2.GetVehicleRequest.SerializeToString,
            vehicles__pb2.VehicleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListVehicles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vehicles.VehiclesService/ListVehicles',
            vehicles__pb2.ListVehiclesRequest.SerializeToString,
            vehicles__pb2.ListVehiclesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateVehicleStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vehicles.VehiclesService/UpdateVehicleStatus',
            vehicles__pb2.UpdateStatusRequest.SerializeToString,
            vehicles__pb2.VehicleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AssignDriver(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vehicles.VehiclesService/AssignDriver',
            vehicles__pb2.AssignDriverRequest.SerializeToString,
            vehicles__pb2.VehicleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveDriver(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vehicles.VehiclesService/RemoveDriver',
            vehicles__pb2.RemoveDriverRequest.SerializeToString,
            vehicles__pb2.VehicleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
