# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import drivers_pb2 as drivers__pb2


class DriverServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterDriver = channel.unary_unary(
                '/drivers.DriverService/RegisterDriver',
                request_serializer=drivers__pb2.RegisterDriverRequest.SerializeToString,
                response_deserializer=drivers__pb2.DriverResponse.FromString,
                )
        self.GetDriver = channel.unary_unary(
                '/drivers.DriverService/GetDriver',
                request_serializer=drivers__pb2.GetDriverRequest.SerializeToString,
                response_deserializer=drivers__pb2.DriverResponse.FromString,
                )
        self.ListDrivers = channel.unary_unary(
                '/drivers.DriverService/ListDrivers',
                request_serializer=drivers__pb2.ListDriversRequest.SerializeToString,
                response_deserializer=drivers__pb2.ListDriversResponse.FromString,
                )
        self.UpdateDriver = channel.unary_unary(
                '/drivers.DriverService/UpdateDriver',
                request_serializer=drivers__pb2.UpdateDriverRequest.SerializeToString,
                response_deserializer=drivers__pb2.DriverResponse.FromString,
                )
        self.AssignDriver = channel.unary_unary(
                '/drivers.DriverService/AssignDriver',
                request_serializer=drivers__pb2.AssignDriverRequest.SerializeToString,
                response_deserializer=drivers__pb2.AssignDriverResponse.FromString,
                )


class DriverServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterDriver(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDriver(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDrivers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateDriver(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AssignDriver(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DriverServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterDriver': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterDriver,
                    request_deserializer=drivers__pb2.RegisterDriverRequest.FromString,
                    response_serializer=drivers__pb2.DriverResponse.SerializeToString,
            ),
            'GetDriver': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDriver,
                    request_deserializer=drivers__pb2.GetDriverRequest.FromString,
                    response_serializer=drivers__pb2.DriverResponse.SerializeToString,
            ),
            'ListDrivers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDrivers,
                    request_deserializer=drivers__pb2.ListDriversRequest.FromString,
                    response_serializer=drivers__pb2.ListDriversResponse.SerializeToString,
            ),
            'UpdateDriver': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateDriver,
                    request_deserializer=drivers__pb2.UpdateDriverRequest.FromString,
                    response_serializer=drivers__pb2.DriverResponse.SerializeToString,
            ),
            'AssignDriver': grpc.unary_unary_rpc_method_handler(
                    servicer.AssignDriver,
                    request_deserializer=drivers__pb2.AssignDriverRequest.FromString,
                    response_serializer=drivers__pb2.AssignDriverResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'drivers.DriverService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DriverService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterDriver(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/drivers.DriverService/RegisterDriver',
            drivers__pb2.RegisterDriverRequest.SerializeToString,
            drivers__pb2.DriverResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDriver(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/drivers.DriverService/GetDriver',
            drivers__pb2.GetDriverRequest.SerializeToString,
            drivers__pb2.DriverResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListDrivers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/drivers.DriverService/ListDrivers',
            drivers__pb2.ListDriversRequest.SerializeToString,
            drivers__pb2.ListDriversResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateDriver(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/drivers.DriverService/UpdateDriver',
            drivers__pb2.UpdateDriverRequest.SerializeToString,
            drivers__pb2.DriverResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AssignDriver(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/drivers.DriverService/AssignDriver',
            drivers__pb2.AssignDriverRequest.SerializeToString,
            drivers__pb2.AssignDriverResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
