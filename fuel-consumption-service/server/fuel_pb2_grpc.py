# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import fuel_pb2 as fuel__pb2


class FuelServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterFuelConsumption = channel.unary_unary(
                '/fuel.FuelService/RegisterFuelConsumption',
                request_serializer=fuel__pb2.RegisterFuelConsumptionRequest.SerializeToString,
                response_deserializer=fuel__pb2.FuelConsumptionResponse.FromString,
                )
        self.GetFuelConsumption = channel.unary_unary(
                '/fuel.FuelService/GetFuelConsumption',
                request_serializer=fuel__pb2.GetFuelConsumptionRequest.SerializeToString,
                response_deserializer=fuel__pb2.FuelConsumptionResponse.FromString,
                )
        self.ListFuelConsumptions = channel.unary_unary(
                '/fuel.FuelService/ListFuelConsumptions',
                request_serializer=fuel__pb2.ListFuelConsumptionsRequest.SerializeToString,
                response_deserializer=fuel__pb2.ListFuelConsumptionsResponse.FromString,
                )
        self.ReportByVehicleType = channel.unary_unary(
                '/fuel.FuelService/ReportByVehicleType',
                request_serializer=fuel__pb2.ReportByVehicleTypeRequest.SerializeToString,
                response_deserializer=fuel__pb2.ReportByVehicleTypeResponse.FromString,
                )
        self.CompareEstimatedVsReal = channel.unary_unary(
                '/fuel.FuelService/CompareEstimatedVsReal',
                request_serializer=fuel__pb2.CompareEstimatedVsRealRequest.SerializeToString,
                response_deserializer=fuel__pb2.CompareEstimatedVsRealResponse.FromString,
                )


class FuelServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterFuelConsumption(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFuelConsumption(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListFuelConsumptions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportByVehicleType(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CompareEstimatedVsReal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FuelServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterFuelConsumption': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterFuelConsumption,
                    request_deserializer=fuel__pb2.RegisterFuelConsumptionRequest.FromString,
                    response_serializer=fuel__pb2.FuelConsumptionResponse.SerializeToString,
            ),
            'GetFuelConsumption': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFuelConsumption,
                    request_deserializer=fuel__pb2.GetFuelConsumptionRequest.FromString,
                    response_serializer=fuel__pb2.FuelConsumptionResponse.SerializeToString,
            ),
            'ListFuelConsumptions': grpc.unary_unary_rpc_method_handler(
                    servicer.ListFuelConsumptions,
                    request_deserializer=fuel__pb2.ListFuelConsumptionsRequest.FromString,
                    response_serializer=fuel__pb2.ListFuelConsumptionsResponse.SerializeToString,
            ),
            'ReportByVehicleType': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportByVehicleType,
                    request_deserializer=fuel__pb2.ReportByVehicleTypeRequest.FromString,
                    response_serializer=fuel__pb2.ReportByVehicleTypeResponse.SerializeToString,
            ),
            'CompareEstimatedVsReal': grpc.unary_unary_rpc_method_handler(
                    servicer.CompareEstimatedVsReal,
                    request_deserializer=fuel__pb2.CompareEstimatedVsRealRequest.FromString,
                    response_serializer=fuel__pb2.CompareEstimatedVsRealResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fuel.FuelService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FuelService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterFuelConsumption(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fuel.FuelService/RegisterFuelConsumption',
            fuel__pb2.RegisterFuelConsumptionRequest.SerializeToString,
            fuel__pb2.FuelConsumptionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFuelConsumption(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fuel.FuelService/GetFuelConsumption',
            fuel__pb2.GetFuelConsumptionRequest.SerializeToString,
            fuel__pb2.FuelConsumptionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListFuelConsumptions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fuel.FuelService/ListFuelConsumptions',
            fuel__pb2.ListFuelConsumptionsRequest.SerializeToString,
            fuel__pb2.ListFuelConsumptionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReportByVehicleType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fuel.FuelService/ReportByVehicleType',
            fuel__pb2.ReportByVehicleTypeRequest.SerializeToString,
            fuel__pb2.ReportByVehicleTypeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CompareEstimatedVsReal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fuel.FuelService/CompareEstimatedVsReal',
            fuel__pb2.CompareEstimatedVsRealRequest.SerializeToString,
            fuel__pb2.CompareEstimatedVsRealResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
